{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	"snp_confusion_matrix": {
		"prefix": "snp_confusion_matrix",
		"body": [
			"def confusion_matrix(y_pred, y_real):",
			"    tp, tn, fp, fn = -1, -1, -1, -1",
			"    tp = sum((y_pred == 1) & (y_real == 1))",
			"    tn = sum((y_pred == 0) & (y_real == 0))",
			"    fp = sum((y_pred == 1) & (y_real == 0))",
			"    fn = sum((y_pred == 0) & (y_real == 1))",
			"    return tp, tn, fp, fn",
		],
		"description": "Create Function_confusion_matrix"
	},
	"snp_calculate_performances": {
		"prefix": "snp_calculate_performances",
		"body": [
			"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score",
			"def calculate_performances(y_pred, y_real):",
			"    accuracy = 0",
			"    precision = 0",
			"    recall = 0",
			"    f1 = 0",
			"    ",
			"    accuracy = accuracy_score(y_real, y_pred)",
			"    precision = precision_score(y_real, y_pred)",
			"    recall = recall_score(y_real, y_pred)",
			"    f1 = f1_score(y_real, y_pred)",
			"    ",
			"    return accuracy, precision, recall, f1",
		],
		"description": "Create Function_confusion_matrix"
	},
	"snp_calc_tpr_fpr_tnr_fnr": {
		"prefix": "snp_calc_tpr_fpr_tnr_fnr",
		"body": [
			"def get_tpr_fpr_tnr_fnr(conf_mat):",
    		"	tp = conf_mat[1,1]",
    		"	tn = conf_mat[0,0]",
    		"	fp = conf_mat[0,1]",
    		"	fn = conf_mat[1,0]",
			"",
    		"	tpr = tp / (tp+fn) # tp / 모든 p",
    		"	fpr = fp / (tn+fp) # fp / 모든 n",
			"	tnr = tn / (tn+fp) # tn / 모든 n",
			"	fnr = fn / (tp+fn) # fn / 모든 p",
			"",
			"	return tpr, fpr, tnr, fnr",
		],
		"description": "calculate trp fpr tnr fnr"
	},
	// Modules
	"snp_modules_basic": {
		"prefix": "snp_modules_basic",
		"body": [
			"import pandas as pd",
			"import numpy as np",
			"import matplotlib.pyplot as plt",
			"import seaborn as sns",
		],
		"description": "show_correlation_in_descending"
	},
	// DataFrame EDA
	"snp_check_correlation": {
		"prefix": "snp_check_correlation",
		"body": [
			"df_corr = df.corr()",
			"df_corr['column'].sort_values(ascending=False)"
		],
		"description": "show_correlation_in_descending"
	},
	"snp_check_null_sum": {
		"prefix": "snp_check_null_sum",
		"body": [
			"df.isna().sum().sort_values(ascending=False)",
		],
		"description": "show_null_sum"
	},
}